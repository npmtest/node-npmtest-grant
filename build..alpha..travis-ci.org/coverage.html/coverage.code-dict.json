{"/home/travis/build/npmtest/node-npmtest-grant/test.js":"/* istanbul instrument in package npmtest_grant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grant/lib.npmtest_grant.js":"/* istanbul instrument in package npmtest_grant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grant = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grant = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grant/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grant && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grant\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grant.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grant.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grant.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grant.__dirname + '/lib.npmtest_grant.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/index.js":"\nexports.express = function () {\n  return require('./lib/consumer/express')\n}\n\nexports.koa = function () {\n  return require('./lib/consumer/koa')\n}\n\nexports.hapi = function () {\n  return require('./lib/consumer/hapi')\n}\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/lib/config.js":"'use strict'\n\nvar crypto = require('crypto')\nvar dcopy = require('deep-copy')\n\n// oauth configuration\nexports.oauth = require('../config/oauth.json')\n// reserved keys\nexports.reserved = require('../config/reserved.json')\n\n\n// generate provider options\nexports.initProvider = function (provider, options, server, name) {\n\n  // merge provider options with user options\n\n\n  // cleanup empty values in custom_params\n  ;(function () {\n    if (options.custom_params) {\n      var params = options.custom_params\n      for (var key in params) {\n        if (!params[key]) {\n          delete params[key]\n        }\n      }\n      if (!Object.keys(params).length) {\n        delete options.custom_params\n      }\n    }\n  })()\n\n  // set reserved keys\n  this.reserved.forEach(function (key) {\n    var value = options[key] || server[key] || provider[key]\n    if (value) {\n      provider[key] = value\n    }\n  })\n\n\n  // transformations\n\n\n  // provider shortcuts\n  if (name) {\n    provider[name] = true\n    provider.name = name\n  }\n\n\n  // oauth credentials\n  ;(function () {\n    var key, secret\n    if (provider.oauth === 1) {\n      key = provider.consumer_key || provider.key\n      secret = provider.consumer_secret || provider.secret\n    }\n    else if (provider.oauth === 2) {\n      key = provider.client_id || provider.key\n      secret = provider.client_secret || provider.secret\n    }\n    if (key) {\n      provider.key = key\n    }\n    if (secret) {\n      provider.secret = secret\n    }\n  })()\n\n\n  // oauth scope\n  if (provider.scope) {\n    if (provider.scope instanceof Array) {\n      provider.scope = provider.scope.join(provider.scope_delimiter || ',')\n    }\n    else if (typeof provider.scope === 'object') {\n      provider.scope = JSON.stringify(provider.scope)\n    }\n  }\n\n\n  // custom_parameters\n  ;(function () {\n    if (provider.custom_parameters) {\n      var params = provider.custom_params || {}\n      for (var key in options) {\n        if (exports.reserved.indexOf(key) === -1 &&\n            provider.custom_parameters.indexOf(key) !== -1) {\n\n          params[key] = options[key]\n        }\n      }\n      if (Object.keys(params).length) {\n        provider.custom_params = params\n      }\n    }\n  })()\n\n\n  // static overrides\n  ;(function () {\n    var overrides = {}\n    for (var key in options) {\n      if (provider.custom_parameters &&\n          provider.custom_parameters.indexOf(key) !== -1) {\n        continue\n      }\n\n      if (exports.reserved.indexOf(key) === -1 &&\n          typeof options[key] === 'object') {\n\n        overrides[key] = exports.initProvider(dcopy(provider), options[key], {})\n      }\n    }\n    if (Object.keys(overrides).length) {\n      provider.overrides = overrides\n    }\n  })()\n\n\n  return provider\n}\n\n// initialize all configured providers\nexports.init = function (config) {\n  config = config || {}\n  var server = config.server || {}\n\n  // generate provider options\n  var result = {}\n  for (var key in config) {\n    if (key === 'server') {\n      continue\n    }\n    var provider = dcopy(this.oauth[key] || {})\n    var options = config[key] || {}\n\n    var generated = this.initProvider(provider, options, server, key)\n    result[generated.name] = generated\n  }\n\n  result.server = server\n  return result\n}\n\n// oauth state transform\nexports.state = function (provider) {\n  var state\n  if (typeof provider.state === 'string' || typeof provider.state === 'number') {\n    state = provider.state.toString()\n  }\n  else if (typeof provider.state === 'boolean' && provider.state) {\n    state = crypto.randomBytes(10).toString('hex')\n  }\n  return state\n}\n\n// get provider on connect\nexports.provider = function (config, session) {\n  var name = session.provider\n  var provider = config[name]\n  var options = {}\n  var server = config.server || {}\n\n  if (!provider) {\n    if (this.oauth[name]) {\n      provider = dcopy(this.oauth[name])\n      provider = this.initProvider(provider, options, server, name)\n\n      config[provider.name] = provider\n    }\n    else {\n      provider = {}\n    }\n  }\n\n  if (session.override && provider.overrides) {\n    var override = provider.overrides[session.override]\n    if (override) {\n      provider = override\n    }\n  }\n\n  if (session.dynamic) {\n    provider = dcopy(provider)\n    options = session.dynamic\n    provider = this.initProvider(provider, options, server)\n  }\n\n  if (provider.state) {\n    provider = dcopy(provider)\n    provider.state = this.state(provider)\n  }\n\n  return provider\n}\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/lib/utils.js":"'use strict'\n\nvar qs = require('qs')\n\n\nexports.redirect_uri = function (provider) {\n  return provider.redirect_uri ||\n    [\n      provider.protocol,\n      '://',\n      provider.host,\n      (provider.path || ''),\n      '/connect/',\n      provider.name,\n      '/callback'\n    ].join('')\n}\n\nexports.toQuerystring = function (provider, body, err) {\n  var data\n  try {\n    data = JSON.parse(body)\n  }\n  catch (e) {\n    data = qs.parse(body)\n  }\n\n  var result = {}\n  if (provider.concur) {\n    result.access_token = body.replace(\n      /[\\s\\S]+<Token>([^<]+)<\\/Token>[\\s\\S]+/, '$1')\n    result.refresh_token = body.replace(\n      /[\\s\\S]+<Refresh_Token>([^<]+)<\\/Refresh_Token>[\\s\\S]+/, '$1')\n    data = body\n  }\n  else if (provider.elance) {\n    result.access_token = data.data.access_token\n    result.refresh_token = data.data.refresh_token\n  }\n  else if (provider.getpocket) {\n    result.access_token = data.access_token\n  }\n  else if (provider.yammer) {\n    result.access_token = data.access_token.token\n  }\n\n  else if (provider.oauth === 1) {\n    for (var key in data) {\n      if (key === 'oauth_token') {\n        result.access_token = data.oauth_token\n      }\n      else if (key === 'oauth_token_secret') {\n        result.access_secret = data.oauth_token_secret\n      }\n    }\n  }\n  else if (provider.oauth === 2) {\n    for (var key in data) {\n      if (key === 'access_token') {\n        result.access_token = data.access_token\n      }\n      else if (key === 'refresh_token') {\n        result.refresh_token = data.refresh_token\n      }\n    }\n  }\n\n  result[err ? 'error' : 'raw'] = data\n  return qs.stringify(result)\n}\n\nexports.error = function (err, res, body) {\n  if (err) {\n    return this.toQuerystring({}, {error: err.message}, true)\n  }\n  if (res.statusCode < 200 || res.statusCode > 299) {\n    return this.toQuerystring({}, body, true)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/lib/consumer/express.js":"'use strict'\n\nvar express = require('express')\n\nvar qs = require('qs')\n\nvar config = require('../config')\nvar flows = {\n  1: require('../flow/oauth1'),\n  2: require('../flow/oauth2'),\n  getpocket: require('../flow/getpocket')\n}\n\n\nfunction Grant (_config) {\n  var app = express()\n  app.config = config.init(_config)\n  app._config = config\n\n  app.all('/connect/:provider/:override?', function (req, res, next) {\n    if (!req.session) {\n      throw new Error('Grant: mount session middleware first')\n    }\n    if (req.method === 'POST' && !req.body) {\n      throw new Error('Grant: mount body parser middleware first')\n    }\n    next()\n  })\n\n  app.get('/connect/:provider/:override?', function (req, res, next) {\n    if (req.params.override === 'callback') {\n      next()\n      return\n    }\n\n    req.session.grant = {\n      provider: req.params.provider\n    }\n    if (req.params.override) {\n      req.session.grant.override = req.params.override\n    }\n    if (Object.keys(req.query || {}).length) {\n      req.session.grant.dynamic = req.query\n    }\n\n    connect(req, res)\n  })\n\n  app.post('/connect/:provider/:override?', function (req, res) {\n    req.session.grant = {\n      provider: req.params.provider\n    }\n    if (req.params.override) {\n      req.session.grant.override = req.params.override\n    }\n    if (Object.keys(req.body || {}).length) {\n      req.session.grant.dynamic = req.body\n    }\n\n    connect(req, res)\n  })\n\n  function connect (req, res) {\n    var grant = req.session.grant\n    var provider = config.provider(app.config, grant)\n    var flow = flows[provider.oauth]\n\n    function callback (err, url) {\n      var path = (provider.callback || '')\n      if (err) {\n        path ? res.redirect(path + '?' + err) : res.end(err)\n      }\n      else {\n        res.redirect(url)\n      }\n    }\n\n    if (/^1$/.test(provider.oauth)) {\n      flow.step1(provider, function (err, data) {\n        if (err) {\n          callback(err)\n        }\n        else {\n          grant.step1 = data\n          var url = flow.step2(provider, data)\n          var error = !/^http|\\//.test(url) ? url : null\n          callback(error, url)\n        }\n      })\n    }\n\n    else if (/^2$/.test(provider.oauth)) {\n      grant.state = provider.state\n      var url = flow.step1(provider)\n      callback(null, url)\n    }\n\n    else if (flow) {\n      flow.step1(provider, function (err, data) {\n        if (err) {\n          callback(err)\n        }\n        else {\n          grant.step1 = data\n          var url = flow.step2(provider, data)\n          callback(null, url)\n        }\n      })\n    }\n\n    else {\n      var err = {error: 'Grant: missing or misconfigured provider'}\n      callback(qs.stringify(err))\n    }\n  }\n\n  app.get('/connect/:provider/callback', function (req, res) {\n    var grant = req.session.grant || {}\n    var provider = config.provider(app.config, grant)\n    var flow = flows[provider.oauth]\n\n    function callback (err, response) {\n      var path = (provider.callback || '')\n      if (err) {\n        path ? res.redirect(path + '?' + err) : res.end(err)\n      }\n      else if (!provider.transport || provider.transport === 'querystring') {\n        res.redirect(path + '?' + response)\n      }\n      else if (provider.transport === 'session') {\n        req.session.grant.response = qs.parse(response)\n        res.redirect(path)\n      }\n    }\n\n    if (/^1$/.test(provider.oauth)) {\n      flow.step3(provider, grant.step1, req.query, callback)\n    }\n\n    else if (/^2$/.test(provider.oauth)) {\n      flow.step2(provider, req.query, grant, function (err, data) {\n        if (err) {\n          callback(err)\n        }\n        else {\n          var response = flow.step3(provider, data)\n          callback(null, response)\n        }\n      })\n    }\n\n    else if (flow) {\n      flow.step3(provider, grant.step1, callback)\n    }\n\n    else {\n      var err = {error: 'Grant: missing session or misconfigured provider'}\n      callback(qs.stringify(err))\n    }\n  })\n\n  return app\n}\n\nexports = module.exports = Grant\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/lib/consumer/hapi.js":"'use strict'\n\nvar qs = require('qs')\n\nvar config = require('../config')\nvar flows = {\n  1: require('../flow/oauth1'),\n  2: require('../flow/oauth2'),\n  getpocket: require('../flow/getpocket')\n}\n\n\nfunction Grant () {\n  this.register.attributes = {\n    pkg: require('../../package.json')\n  }\n}\n\nGrant.prototype.register = function (server, options, next) {\n  var self = this\n  self.config = config.init(options)\n  this.register.config = self.config\n  this.register._config = config\n  Grant.config = self.config\n  Grant._config = config\n\n  server.route({\n    method: ['GET', 'POST'],\n    path: '/connect/{provider}/{override?}',\n    handler: function (req, res) {\n      if (!(req.session || req.yar)) {\n        throw new Error('Grant: register session plugin first')\n      }\n\n      var session = {\n        provider: req.params.provider\n      }\n      if (req.params.override) {\n        session.override = req.params.override\n      }\n      if (req.method === 'get' && Object.keys(req.query || {}).length) {\n        session.dynamic = req.query\n      }\n      if (req.method === 'post' && Object.keys(req.payload || {}).length) {\n        session.dynamic = req.payload\n      }\n      ;(req.session || req.yar).set('grant', session)\n\n      connect(req, res)\n    }\n  })\n\n  function connect (req, res) {\n    var grant = (req.session || req.yar).get('grant')\n    var provider = config.provider(self.config, grant)\n    var flow = flows[provider.oauth]\n\n    function callback (err, url) {\n      var path = (provider.callback || '')\n      if (err) {\n        path ? res.redirect(path + '?' + err) : res(err)\n      }\n      else {\n        res.redirect(url)\n      }\n    }\n\n    if (/^1$/.test(provider.oauth)) {\n      flow.step1(provider, function (err, data) {\n        if (err) {\n          callback(err)\n        }\n        else {\n          grant.step1 = data\n          var url = flow.step2(provider, data)\n          var error = !/^http|\\//.test(url) ? url : null\n          callback(error, url)\n        }\n      })\n    }\n\n    else if (/^2$/.test(provider.oauth)) {\n      grant.state = provider.state\n      var url = flow.step1(provider)\n      callback(null, url)\n    }\n\n    else if (flow) {\n      flow.step1(provider, function (err, data) {\n        if (err) {\n          callback(err)\n        }\n        else {\n          grant.step1 = data\n          var url = flow.step2(provider, data)\n          callback(null, url)\n        }\n      })\n    }\n\n    else {\n      var err = {error: 'Grant: missing or misconfigured provider'}\n      callback(qs.stringify(err))\n    }\n  }\n\n  server.route({\n    method: 'GET',\n    path: '/connect/{provider}/callback',\n    handler: function (req, res) {\n      var grant = (req.session || req.yar).get('grant') || {}\n      var provider = config.provider(self.config, grant)\n      var flow = flows[provider.oauth]\n\n      function callback (err, response) {\n        var path = (provider.callback || '')\n        if (err) {\n          path ? res.redirect(path + '?' + err) : res(err)\n        }\n        else if (!provider.transport || provider.transport === 'querystring') {\n          res.redirect(path + '?' + response)\n        }\n        else if (provider.transport === 'session') {\n          grant.response = qs.parse(response)\n          ;(req.session || req.yar).set('grant', grant)\n          res.redirect(path)\n        }\n      }\n\n      if (/^1$/.test(provider.oauth)) {\n        flow.step3(provider, grant.step1, req.query, callback)\n      }\n\n      else if (/^2$/.test(provider.oauth)) {\n        flow.step2(provider, req.query, grant, function (err, data) {\n          if (err) {\n            callback(err)\n          }\n          else {\n            var response = flow.step3(provider, data)\n            callback(null, response)\n          }\n        })\n      }\n\n      else if (flow) {\n        flow.step3(provider, grant.step1, callback)\n      }\n\n      else {\n        var err = {error: 'Grant: missing session or misconfigured provider'}\n        callback(qs.stringify(err))\n      }\n    }\n  })\n\n  next()\n}\n\nexports = module.exports = Grant\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/lib/flow/oauth1.js":"'use strict'\n\nvar qs = require('qs')\nvar request = require('request')\nvar utils = require('../utils')\n\n\nexports.step1 = function (provider, done) {\n  var url = provider.request_url\n  var options = {\n    oauth: {\n      callback: utils.redirect_uri(provider),\n      consumer_key: provider.key,\n      consumer_secret: provider.secret\n    }\n  }\n  if (provider.copy || provider.etsy || provider.linkedin) {\n    options.qs = {scope: provider.scope}\n  }\n  if (provider.discogs) {\n    options.headers = {'user-agent': 'Grant'}\n  }\n  if (provider.freshbooks) {\n    options.oauth.signature_method = 'PLAINTEXT'\n  }\n  if (provider.subdomain) {\n    url = url.replace('[subdomain]', provider.subdomain)\n  }\n  request.post(url, options, function (err, res, body) {\n    var error = utils.error(err, res, body)\n    done(error, qs.parse(body))\n  })\n}\n\nexports.step2 = function (provider, step1) {\n  if (!step1.oauth_token) {\n    var error = (Object.keys(step1).length)\n      ? step1 : {error: 'Grant: OAuth1 missing oauth_token parameter'}\n    return utils.toQuerystring({}, error, true)\n  }\n  var url = provider.authorize_url\n  var params = {\n    oauth_token: step1.oauth_token\n  }\n  if (provider.custom_params) {\n    for (var key in provider.custom_params) {\n      params[key] = provider.custom_params[key]\n    }\n  }\n  if (provider.flickr) {\n    params.perms = provider.scope\n  }\n  if (provider.ravelry || provider.trello) {\n    params.scope = provider.scope\n  }\n  if (provider.tripit) {\n    params.oauth_callback = utils.redirect_uri(provider)\n  }\n  if (provider.subdomain) {\n    url = url.replace('[subdomain]', provider.subdomain)\n  }\n  return url + '?' + qs.stringify(params)\n}\n\nexports.step3 = function (provider, step1, step2, done) {\n  if (!step2.oauth_token) {\n    var error = (Object.keys(step2).length)\n      ? step2 : {error: 'Grant: OAuth1 missing oauth_token parameter'}\n    done(utils.toQuerystring({}, error, true))\n    return\n  }\n  var url = provider.access_url\n  var options = {\n    oauth: {\n      consumer_key: provider.key,\n      consumer_secret: provider.secret,\n      token: step2.oauth_token,\n      token_secret: step1.oauth_token_secret,\n      verifier: step2.oauth_verifier\n    }\n  }\n  if (provider.discogs) {\n    options.headers = {'user-agent': 'Grant'}\n  }\n  if (provider.freshbooks) {\n    options.oauth.signature_method = 'PLAINTEXT'\n  }\n  if (provider.goodreads || provider.tripit) {\n    delete options.oauth.verifier\n  }\n  if (provider.subdomain) {\n    url = url.replace('[subdomain]', provider.subdomain)\n  }\n  request.post(url, options, function (err, res, body) {\n    if (provider.intuit) {\n      body += '&realmId=' + step2.realmId\n    }\n    var error = utils.error(err, res, body)\n    done(error, utils.toQuerystring(provider, body))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/lib/flow/oauth2.js":"'use strict'\n\nvar crypto = require('crypto')\nvar qs = require('qs')\nvar request = require('request')\nvar utils = require('../utils')\n\n\nexports.step1 = function (provider) {\n  var url = provider.authorize_url\n  var params = {\n    client_id: provider.key,\n    response_type: 'code',\n    redirect_uri: utils.redirect_uri(provider),\n    scope: provider.scope,\n    state: provider.state\n  }\n  if (provider.custom_params) {\n    for (var key in provider.custom_params) {\n      params[key] = provider.custom_params[key]\n    }\n  }\n  if (provider.basecamp) {\n    params.type = 'web_server'\n  }\n  if (provider.optimizely) {\n    params.scopes = params.scope\n    delete params.scope\n  }\n  if (provider.visualstudio) {\n    params.response_type = 'Assertion'\n  }\n  if (provider.subdomain) {\n    url = url.replace('[subdomain]', provider.subdomain)\n  }\n  var querystring = qs.stringify(params)\n  if (provider.unsplash && params.scope) {\n    var scope = params.scope\n    delete params.scope\n    querystring = qs.stringify(params) + '&scope=' + scope\n  }\n  return url + '?' + querystring\n}\n\nexports.step2 = function (provider, step1, session, done) {\n  if (!step1.code) {\n    var error = (Object.keys(step1).length)\n      ? step1 : {error: 'Grant: OAuth2 missing code parameter'}\n    done(utils.toQuerystring({}, error, true))\n    return\n  }\n  else if ((step1.state && session.state) && (step1.state !== session.state)) {\n    var error = {error: 'Grant: OAuth2 state mismatch'}\n    done(utils.toQuerystring({}, error, true))\n    return\n  }\n  var url = provider.access_url\n  var options = {\n    form: {\n      grant_type: 'authorization_code',\n      code: step1.code,\n      client_id: provider.key,\n      client_secret: provider.secret,\n      redirect_uri: utils.redirect_uri(provider)\n    }\n  }\n  if (provider.basecamp) {\n    options.form.type = 'web_server'\n  }\n  if (provider.concur) {\n    delete options.form\n    options.qs = {\n      code: step1.code,\n      client_id: provider.key,\n      client_secret: provider.secret\n    }\n  }\n  if (provider.ebay || provider.fitbit2 || provider.homeaway || provider.reddit) {\n    delete options.form.client_id\n    delete options.form.client_secret\n    options.auth = {user: provider.key, pass: provider.secret}\n  }\n  if (provider.smartsheet) {\n    delete options.form.client_secret\n    var hash = crypto.createHash('sha256')\n    hash.update(provider.secret + '|' + step1.code)\n    options.form.hash = hash.digest('hex')\n  }\n  if (provider.surveymonkey) {\n    options.qs = {api_key: provider.custom_params.api_key}\n  }\n  if (provider.visualstudio) {\n    options.form = {\n      client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      client_assertion: provider.secret,\n      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n      assertion: step1.code,\n      redirect_uri: utils.redirect_uri(provider)\n    }\n  }\n  if (provider.subdomain) {\n    url = url.replace('[subdomain]', provider.subdomain)\n  }\n  request.post(url, options, function (err, res, body) {\n    var error = utils.error(err, res, body)\n    done(error, body)\n  })\n}\n\nexports.step3 = function (provider, step2) {\n  return utils.toQuerystring(provider, step2)\n}\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/lib/flow/getpocket.js":"'use strict'\n\nvar qs = require('qs')\nvar request = require('request')\nvar utils = require('../utils')\n\n\nexports.step1 = function (provider, done) {\n  var url = provider.request_url\n  var options = {\n    headers: {\n      'x-accept': 'application/x-www-form-urlencoded'\n    },\n    form: {\n      consumer_key: provider.key,\n      redirect_uri: utils.redirect_uri(provider),\n      state: provider.state\n    }\n  }\n  request.post(url, options, function (err, res, body) {\n    var error = utils.error(err, res, body)\n    done(error, qs.parse(body))\n  })\n}\n\nexports.step2 = function (provider, step1) {\n  var url = provider.authorize_url\n  var params = {\n    request_token: step1.code,\n    redirect_uri: utils.redirect_uri(provider)\n  }\n  return url + '?' + qs.stringify(params)\n}\n\nexports.step3 = function (provider, step1, done) {\n  var url = provider.access_url\n  var options = {\n    headers: {\n      'x-accept': 'application/x-www-form-urlencoded'\n    },\n    form: {\n      consumer_key: provider.key,\n      code: step1.code\n    }\n  }\n  request.post(url, options, function (err, res, body) {\n    var error = utils.error(err, res, body)\n    done(error, utils.toQuerystring(provider, body))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-grant/node_modules/grant/lib/consumer/koa.js":"'use strict'\n\nvar Koa = require('koa')\nvar route = require('koa-route')\nvar thunkify = require('thunkify')\n\nvar qs = require('qs')\n\nvar config = require('../config')\nvar f = {\n  1: require('../flow/oauth1'),\n  2: require('../flow/oauth2'),\n  3: require('../flow/getpocket')\n}\nvar flows = {\n  1: {step1: thunkify(f[1].step1), step2: f[1].step2, step3: thunkify(f[1].step3)},\n  2: {step1: f[2].step1, step2: thunkify(f[2].step2), step3: f[2].step3},\n  getpocket: {step1: thunkify(f[3].step1), step2: f[3].step2, step3: thunkify(f[3].step3)}\n}\n\n\nfunction Grant (_config) {\n  var app = new Koa()\n  app.config = config.init(_config)\n  app._config = config\n\n  app.use(route.all('/connect/:provider/:override?', function* (provider, override, next) {\n    if (!this.session) {\n      throw new Error('Grant: mount session middleware first')\n    }\n    if (this.method === 'POST' && !this.request.body) {\n      throw new Error('Grant: mount body parser middleware first')\n    }\n\n    yield next\n  }))\n\n  app.use(route.get('/connect/:provider/:override?', function* (provider, override) {\n    if (override === 'callback') {\n      yield callback\n      return\n    }\n\n    this.session.grant = {\n      provider: provider\n    }\n    if (override) {\n      this.session.grant.override = override\n    }\n    if (Object.keys(this.request.query || {}).length) {\n      this.session.grant.dynamic = this.request.query\n    }\n\n    yield connect\n  }))\n\n  app.use(route.post('/connect/:provider/:override?', function* (provider, override) {\n    this.session.grant = {\n      provider: provider\n    }\n    if (override) {\n      this.session.grant.override = override\n    }\n    if (Object.keys(this.request.body || {}).length) {\n      this.session.grant.dynamic = this.request.body\n    }\n\n    yield connect\n  }))\n\n  function* connect () {\n    var grant = this.session.grant\n    var provider = config.provider(app.config, grant)\n    var flow = flows[provider.oauth]\n\n    var callback = function (err, url) {\n      var path = (provider.callback || '')\n      if (err) {\n        if (path) {\n          this.response.redirect(path + '?' + err)\n        }\n        else {\n          this.body = err\n        }\n      }\n      else {\n        this.response.redirect(url)\n      }\n    }.bind(this)\n\n    if (/^1$/.test(provider.oauth)) {\n      try {\n        grant.step1 = yield flow.step1(provider)\n        var url = flow.step2(provider, grant.step1)\n        var err = !/^http|\\//.test(url) ? url : null\n        callback(err, url)\n      }\n      catch (err) {\n        callback(err)\n      }\n    }\n\n    else if (/^2$/.test(provider.oauth)) {\n      grant.state = provider.state\n      var url = flow.step1(provider)\n      callback(null, url)\n    }\n\n    else if (flow) {\n      try {\n        grant.step1 = yield flow.step1(provider)\n        var url = flow.step2(provider, grant.step1)\n        callback(null, url)\n      }\n      catch (err) {\n        callback(err)\n      }\n    }\n\n    else {\n      var error = {error: 'Grant: missing or misconfigured provider'}\n      callback(qs.stringify(error))\n    }\n  }\n\n  function* callback () {\n    var grant = this.session.grant || {}\n    var provider = config.provider(app.config, grant)\n    var flow = flows[provider.oauth]\n\n    var callback = function (err, response) {\n      var path = (provider.callback || '')\n      if (err) {\n        if (path) {\n          this.response.redirect(path + '?' + err)\n        }\n        else {\n          this.body = err\n        }\n      }\n      else if (!provider.transport || provider.transport === 'querystring') {\n        this.response.redirect(path + '?' + response)\n      }\n      else if (provider.transport === 'session') {\n        this.session.grant.response = qs.parse(response)\n        this.response.redirect(path)\n      }\n    }.bind(this)\n\n    if (/^1$/.test(provider.oauth)) {\n      try {\n        var response = yield flow.step3(provider, grant.step1, this.query)\n        callback(null, response)\n      }\n      catch (err) {\n        callback(err)\n      }\n    }\n\n    else if (/^2$/.test(provider.oauth)) {\n      try {\n        var data = yield flow.step2(provider, this.query, grant)\n        var response = flow.step3(provider, data)\n        callback(null, response)\n      }\n      catch (err) {\n        callback(err)\n      }\n    }\n\n    else if (flow) {\n      try {\n        var response = yield flow.step3(provider, grant.step1)\n        callback(null, response)\n      }\n      catch (err) {\n        callback(err)\n      }\n    }\n\n    else {\n      var err = {error: 'Grant: missing session or misconfigured provider'}\n      callback(qs.stringify(err))\n    }\n  }\n\n  return app\n}\n\nexports = module.exports = Grant\n"}